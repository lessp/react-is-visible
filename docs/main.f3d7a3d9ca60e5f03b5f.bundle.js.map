{"version":3,"file":"main.f3d7a3d9ca60e5f03b5f.bundle.js","sources":["webpack:///./src/IsVisible.js"],"sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport VO from './VisibilityObserver'\n\nclass IsVisible extends React.Component {\n  state = {\n    isVisible: false,\n  }\n\n  componentDidMount() {\n    this.unwatch = VO.watch(\n      ReactDOM.findDOMNode(this),\n      this.handleVisibilityChange\n    )\n  }\n\n  shouldComponentUpdate(_nextProps, nextState) {\n    return nextState !== this.state\n  }\n\n  componentWillUnmount() {\n    this.unwatch()\n  }\n\n  handleVisibilityChange = ({ isIntersecting }) => {\n    if (this.state.isVisible !== isIntersecting) {\n      this.setState({\n        isVisible: isIntersecting,\n      })\n    }\n  }\n\n  render() {\n    const { isVisible } = this.state\n\n    const renderedChildren = this.props.children(isVisible)\n    return renderedChildren && React.Children.only(renderedChildren)\n  }\n}\n\nexport default IsVisible\n"],"mappings":"AAKA","sourceRoot":""}